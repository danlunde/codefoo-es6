// using promises
const makeRequest = () =>
  getJSON().then(data => {
    console.log(data)
    return 'done'
  })
makeRequest()

// using async / await
const makeRequest = async () => {
  console.log(await getJSON())
  return 'done'
}
makeRequest()

// -
// error handling two different ways with promises
const makeRequest = () => {
  try {
    getJSON().then(result => {
      // this parse may fail
      const data = JSON.parse(result)
      console.log(data)
    })
    // uncomment this block to handle asynchronous errors
    // .catch((err) => {
    //   console.log(err)
    // })
  } catch (err) {
    console.log(err)
  }
}

// async / await does it all with a single try / catch
const makeRequest = async () => {
  try {
    // this parse may fail
    const data = JSON.parse(await getJSON())
    console.log(data)
  } catch (err) {
    console.log(err)
  }
}

// promises with conditionals can suffer from ever-growing nesting
const makeRequest = () => {
  return getJSON().then(data => {
    if (data.needsAnotherRequest) {
      return makeAnotherRequest(data).then(moreData => {
        console.log(moreData)
        return moreData
      })
    } else {
      console.log(data)
      return data
    }
  })
}

// while async / await keeps it all flat and readable
const makeRequest = async () => {
  const data = await getJSON()
  if (data.needsAnotherRequest) {
    const moreData = await makeAnotherRequest(data)
    console.log(moreData)
    return moreData
  } else {
    console.log(data)
    return data
  }
}

// in growing promise chains
// where promise 3 depends on promise 1 & 2
const makeRequest = () => {
  return promise1().then(value1 => {
    // do something
    return promise2(value1).then(value2 => {
      // do something
      return promise3(value1, value2)
    })
  })
}

// becomes immediately more clear with await
const makeRequest = async () => {
  const value1 = await promise1()
  const value2 = await promise2(value1)
  return promise3(value1, value2)
}

// one gotcha, await will halt each execution until it is resolved
const makeRequests = async () => {
  const value1 = await fetch('api/v1/user')
  const value2 = await fetch('api/v1/post') // waits for value1
  const value3 = await fetch('api/v1/comment') // waits for value2
  return { value1, value2, value3 }
}

// if you need to make multiple async requests in parallel
// collect the promises together and use Promise.all like before
const makeRequests = async () => {
  const value1Promise = fetch('api/v1/user')
  const value2Promise = fetch('api/v1/post')
  const value3Promise = fetch('api/v1/comment')
  // now all the fetch will occur in parallel
  const [value1, value2, value3] = await Promise.all([value1Promise, value2Promise, value3Promise])
  return { value1, value2, value3 }
}
