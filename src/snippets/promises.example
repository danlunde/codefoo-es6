// Creating a promise wrapper for setTimeout
function wait(delay = 0) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, delay)
  })
}

// Using a promise
wait(3000)
  .then(() => {
    console.log('3 seconds have passed!')
    return wait(2000)
  })
  .then(() => {
    console.log('5 seconds have passed!')
    x++ // ReferenceError triggers `catch`
  })
  .catch(error => {
    // output: ReferenceError
    console.log(error)
  })
  .then(() => {
    // simulate `finally` clause
    console.log('clean up')
  })

// ES5 - the dreaded callbacks
function fetch(url, callback) {
  var request = new XMLHttpRequest()

  request.open('GET', url)

  request.onload = function() {
    var data, error

    if (request.status === 200) {
      data = request.responseText
    } else {
      error = new Error('request failed!')
    }

    callback({ data: data, error: error })
  }

  request.onerror = function(e) {
    callback({ error: e })
  }

  try {
    request.send()
  } catch (e) {
    callback({ error: e })
  }
}

fetch('/json/data.json', function(responseObj) {
  if (!responseObj.error) {
    try {
      console.log('data!', JSON.parse(responseObj.data))
    } catch (e) {
      console.error(e)
    }
  } else {
    console.error(responseObj.error)
  }
})

// ES5 - nested callbacks
fetch('/json/data.json', function(responseObj) {
  if (!responseObj.error) {
    try {
      var data = JSON.parse(responseObj.data)

      console.log('main data', data)

      // now call `fetch` again to retrieve new data
      // based on the response data
      fetch(data.url, function(responseObjInner) {
        if (!responseObjInner.error) {
          console.log('inner data', responseObjInner.data)
        } else {
          console.error(responseObjInner.error)
        }
      })
    } catch (e) {
      console.error(e)
    }
  } else {
    console.error(responseObj.error)
  }
})

// Improvements
function fetch(url) {
  // return a Promise object
  return new Promise((resolve, reject) => {
    let request = new XMLHttpRequest()

    request.open('GET', url)

    request.onload = function() {
      if (request.status === 200) {
        // fulfill the promise
        resolve(request.responseText)
      } else {
        // reject the promise
        reject(new Error('request failed!'))
      }
    }

    request.send()
  })
}

fetch('/json/data.json')
  .then(response => {
    let data = JSON.parse(response.text)

    console.log('main data', data)

    // now call `fetch` again to retrieve new data
    // based on the response data
    return fetch(data.url)
  })
  .then(response => {
    console.log('inner data', response)
  })
  .catch(e => {
    // catching all failures!
    console.error(e)
  })

// if at any point an error is thrown
// a Promise will implicitly reject the Promise
// as if it was written like
new Promise((resolve, reject) => {
  try {
    throw new Error('Error!')
  } catch (e) {
    reject(e)
  }
})

// .then() receives the resolve(data) as its first argument
fetch('/json/data.json').then(response => {
  // handle response data
})

// .then() receives any rejection error in its second argument
fetch('/json/data.json').then(null, e => {
  // handle errors
})

// .catch() is the equivalent, but more succinct
fetch('/json/data.json').catch(e => {
  // handle errors
})

// Promise.resolve() creates a promise
// that is "immediately" settled & fulfilled.
// You can optionally pass a value
Promise.resolve('Daniel').then(name => {
  // output: Daniel
  console.log(name)
})

console.log('but this still executes first')

// Catching errors is simpler and can also be chained
// Create immediately fulfilled, but empty promise
Promise.resolve()
  .then(() => {
    // throw an `Error` which should be
    // caught by `catch()`
    throw new Error('oh no!')
  })
  .catch(e => {
    // output: 'oh no!' error with call
    // stack info
    console.error(e)

    // throw another `Error` within this
    // error handler, which can be caught
    // by a follow-up error handler
    throw new Error('again?!?!')
  })
  .catch(e => {
    // output: 'again?!?!' error
    console.error(e)
  })

// and if you want to make multiple async requests in parallel
// but only do something when they have all finished
// Return a promise that is only fulfilled once
// all of the url fetch requests are fulfilled
// via Promise.all
function fetchAll(...urls) {
  // Use rest parameter to aggregate URLs
  // into an array

  return Promise.all(
    // map the array of urls into an array
    // of `fetch` promises
    urls.map(fetch)
  )
}

// Make an XHR request for each URL and
// process the results once they've *all*
// completed
fetchAll(
  '/json/data.json',
  '/json/data2.json',
  '/json/data3.json',
  '/json/data4.json',
  '/json/data5.json'
).then(responses => {
  // `responses` is the array of response
  // data

  // output: 5
  console.log(responses.length)

  // more processing of results
})
