// Creating a promise wrapper for setTimeout
function wait(delay = 0) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, delay)
  })
}

// Using a promise
wait(3000)
  .then(() => {
    console.log('3 seconds have passed!')
    return wait(2000)
  })
  .then(() => {
    console.log('5 seconds have passed!')
    x++ // ReferenceError triggers `catch`
  })
  .catch(error => {
    // output: ReferenceError
    console.log(error)
  })
  .then(() => {
    // simulate `finally` clause
    console.log('clean up')
  })

// ES5 - the dreaded callbacks
function fetch(url, callback) {
  var request = new XMLHttpRequest()

  request.open('GET', url)

  request.onload = function() {
    var data, error

    if (request.status === 200) {
      data = request.responseText
    } else {
      error = new Error('request failed!')
    }

    callback({ data: data, error: error })
  }

  request.onerror = function(e) {
    callback({ error: e })
  }

  try {
    request.send()
  } catch (e) {
    callback({ error: e })
  }
}

fetch('/json/data.json', function(responseObj) {
  if (!responseObj.error) {
    try {
      console.log('data!', JSON.parse(responseObj.data))
    } catch (e) {
      console.error(e)
    }
  } else {
    console.error(responseObj.error)
  }
})

// ES5 - nested callbacks
fetch('/json/data.json', function(responseObj) {
  if (!responseObj.error) {
    try {
      var data = JSON.parse(responseObj.data)

      console.log('main data', data)

      // now call `fetch` again to retrieve new data
      // based on the response data
      fetch(data.url, function(responseObjInner) {
        if (!responseObjInner.error) {
          console.log('inner data', responseObjInner.data)
        } else {
          console.error(responseObjInner.error)
        }
      })
    } catch (e) {
      console.error(e)
    }
  } else {
    console.error(responseObj.error)
  }
})

// Improvements
function fetch(url) {
  // return a Promise object
  return new Promise((resolve, reject) => {
    let request = new XMLHttpRequest()

    request.open('GET', url)

    request.onload = function() {
      if (request.status === 200) {
        // fulfill the promise
        resolve(request.responseText)
      } else {
        // reject the promise
        reject(new Error('request failed!'))
      }
    }

    request.send()
  })
}

fetch('/json/data.json')
  .then(response => {
    let data = JSON.parse(response.text)

    console.log('main data', data)

    // now call `fetch` again to retrieve new data
    // based on the response data
    return fetch(data.url)
  })
  .then(response => {
    console.log('inner data', response)
  })
  .catch(e => {
    // catching all failures!
    console.error(e)
  })
