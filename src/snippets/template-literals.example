// Basic template literal is surrounding by backticks
// so single/double quotes do not need to be escaped
// output: He said, "It's your fault!"
console.log(`He said, "It's your fault!"`)

let firstName = 'Daniel',
  lastName = `Lunde`
// Template literals support interpolation.
// The values within `firstName` and `lastName`
// are substituted into where the tokens are
// output: Name: Lunde, Daniel
console.log(`Name: ${lastName}, ${firstName}`)

// Template literals support multi-line strings
// output: This is
// 		multi-line text, so that
//		newline characters are
//
//
//		not needed. All whitespace
//			is respected, including tabs.
//
//
console.log(`This is
	multi-line text, so that
	newline characters are


	not needed. All whitespace
		is respected, including tabs.

`)

// ${} interpolation also allows expression interpolation
let timeOfDay = new Date().getHours(),
  mealCost = 7.99,
  tax = 0.09

// any sort of expression can go inside the substitution token
// output: Morning/Evening meal: $8.71
console.log(`${timeOfDay < 12 ? 'Morning' : 'Evening'} meal: $${(mealCost * (1 + tax)).toFixed(2)}`)

// -
// you can even use interpolation expressions
// which return template literals nested inside a template literal
let eventCardInfo = {
    title: 'Nodevember 2015',
    url: 'http://nodevember.org/',
    tagline: 'Two days of Node and JavaScript',
    tags: ['JavaScript', 'Node'],
  },
  { title, url, tagline, tags } = eventCardInfo,
  html = `
  <section>
    <h3><a href="${url}">${title}</a></h3>
    <p>${tagline}</p>
    <ul>
      ${tags.map(tag => `<li>${tag}</li>`).join('\n')}
    </ul>
  </section>
`

// tagged templates let's us process the string
// output: Name: Lunde, Daniel
console.log(interpolate`Name: ${lastName}, ${firstName}`)

function interpolate(literals, ...substitutions) {
  // literals = ['Name: ', ', ', '']
  // substitutions = ['Lunde', 'Daniel']
  // substitutions.length == literals.length - 1
  // implementation here
}

// often see that with css preprocessing in javascript and jsx
const Container = div`
  color: red;
  font-size: 1.25em;
`
