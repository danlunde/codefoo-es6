function simpleExample(value) {
  const constValue = value

  if (value) {
    var varValue = value
    let letValue = value

    console.log('inside block', varValue, letValue)
  }

  console.log('outside block')

  // varValue is available even though it was defined
  // in if-block because it was "hoisted" to function scope
  console.log(varValue)

  try {
    // letValue is a ReferenceError because it
    // was defined w/in if-block
    console.log(letValue)
  } catch (e) {
    // e is a ReferenceError
    console.log('letValue not accessible', e)
  }

  try {
    // SyntaxError to try and update a variable
    // declared via const
    constValue += 1
  } catch (e) {
    // e is a SyntaxError
    console.log('constValue can not be changed', e)
  }
}

simpleExample(2)

// use `let` inside of for loops
function simpleLoopExample() {
  for (var i = 0; i < 5; i++) {
    console.log('i=', i)
  }
  for (let j = 0; j < 5; j++) {
    console.log('j=', j)
  }

  // i is accessible outside of the for loop
  // and has the value 5
  console.log('after i=', i)

  // j is not accessible outside of the for loop
  // and is a ReferenceError
  console.log('after j=', j)
}
simpleLoopExample()
